function [ke_all_m,me_all_m,Ge_all_m,fk_all_m]=Fun_me_ke_fk(Elem,Node,m,Gauss_points,E_case,nu_case,rho_case,num_node,Dnum_pnode,Nnum_pelem)
%  Use Gaussian integration points to obtain the stiffness matrix and mass matrix
%  Notice: different element use different code, see in elelibrary.txt
%  By Fuzhen, 2024/03/25;
 
ke_all_m=0; me_all_m=0; rho=rho_case; ke_12=0; ke_21=0; ke_22=0;
% global E_case nu_case rho_case g_case % 弹性模量、泊松比、密度
% global num_node Dnum_pnode Nnum_pelem   %模型的单元和节点及自由度数
E=E_case; nu=nu_case;
code_nodes=Elem(m,2:end);   %取出第m个单元的节点号；获得第m个单元的所有节点的坐标向量
x0=Node(code_nodes,2:4)-Node(repmat(code_nodes(1),1,8),2:4);  %获得每个单元的x0
for i=1:length(Gauss_points)
x=Gauss_points(i,2);
y=Gauss_points(i,3);
z=Gauss_points(i,4);
% jacob
J=[(x0(2,1)*(y-1)*(z+1))-(x0(1,1)*(y-1)*(z-1))+(x0(3,1)*(y+1)*(z-1))-(x0(4,1)*(y+1)*(z+1))+(x0(5,1)*(y-1)*(z-1))-(x0(6,1)*(y-1)*(z+1))-(x0(7,1)*(y+1)*(z-1))+(x0(8,1)*(y+1)*(z+1)),(x0(2,2)*(y-1)*(z+1))-(x0(1,2)*(y-1)*(z-1))+(x0(3,2)*(y+1)*(z-1))-(x0(4,2)*(y+1)*(z+1))+(x0(5,2)*(y-1)*(z-1))-(x0(6,2)*(y-1)*(z+1))-(x0(7,2)*(y+1)*(z-1))+(x0(8,2)*(y+1)*(z+1)),(x0(2,3)*(y-1)*(z+1))-(x0(1,3)*(y-1)*(z-1))+(x0(3,3)*(y+1)*(z-1))-(x0(4,3)*(y+1)*(z+1))+(x0(5,3)*(y-1)*(z-1))-(x0(6,3)*(y-1)*(z+1))-(x0(7,3)*(y+1)*(z-1))+(x0(8,3)*(y+1)*(z+1));
   (x0(2,1)*(x-1)*(z+1))-(x0(1,1)*(x-1)*(z-1))+(x0(3,1)*(x-1)*(z-1))-(x0(4,1)*(x-1)*(z+1))+(x0(5,1)*(x+1)*(z-1))-(x0(6,1)*(x+1)*(z+1))-(x0(7,1)*(x+1)*(z-1))+(x0(8,1)*(x+1)*(z+1)),(x0(2,2)*(x-1)*(z+1))-(x0(1,2)*(x-1)*(z-1))+(x0(3,2)*(x-1)*(z-1))-(x0(4,2)*(x-1)*(z+1))+(x0(5,2)*(x+1)*(z-1))-(x0(6,2)*(x+1)*(z+1))-(x0(7,2)*(x+1)*(z-1))+(x0(8,2)*(x+1)*(z+1)),(x0(2,3)*(x-1)*(z+1))-(x0(1,3)*(x-1)*(z-1))+(x0(3,3)*(x-1)*(z-1))-(x0(4,3)*(x-1)*(z+1))+(x0(5,3)*(x+1)*(z-1))-(x0(6,3)*(x+1)*(z+1))-(x0(7,3)*(x+1)*(z-1))+(x0(8,3)*(x+1)*(z+1));
   (x0(2,1)*(x-1)*(y-1))-(x0(1,1)*(x-1)*(y-1))+(x0(3,1)*(x-1)*(y+1))-(x0(4,1)*(x-1)*(y+1))+(x0(5,1)*(x+1)*(y-1))-(x0(6,1)*(x+1)*(y-1))-(x0(7,1)*(x+1)*(y+1))+(x0(8,1)*(x+1)*(y+1)),(x0(2,2)*(x-1)*(y-1))-(x0(1,2)*(x-1)*(y-1))+(x0(3,2)*(x-1)*(y+1))-(x0(4,2)*(x-1)*(y+1))+(x0(5,2)*(x+1)*(y-1))-(x0(6,2)*(x+1)*(y-1))-(x0(7,2)*(x+1)*(y+1))+(x0(8,2)*(x+1)*(y+1)),(x0(2,3)*(x-1)*(y-1))-(x0(1,3)*(x-1)*(y-1))+(x0(3,3)*(x-1)*(y+1))-(x0(4,3)*(x-1)*(y+1))+(x0(5,3)*(x+1)*(y-1))-(x0(6,3)*(x+1)*(y-1))-(x0(7,3)*(x+1)*(y+1))+(x0(8,3)*(x+1)*(y+1));]/8;

DN_XI=[-((y - 1)*(z - 1))/8, ((y - 1)*(z + 1))/8, ((y + 1)*(z - 1))/8, -((y + 1)*(z + 1))/8, ((y - 1)*(z - 1))/8, -((y - 1)*(z + 1))/8, -((y + 1)*(z - 1))/8, ((y + 1)*(z + 1))/8;
       -((x - 1)*(z - 1))/8, ((x - 1)*(z + 1))/8, ((x - 1)*(z - 1))/8, -((x - 1)*(z + 1))/8, ((x + 1)*(z - 1))/8, -((x + 1)*(z + 1))/8, -((x + 1)*(z - 1))/8, ((x + 1)*(z + 1))/8;
       -((x - 1)*(y - 1))/8, ((x - 1)*(y - 1))/8, ((x - 1)*(y + 1))/8, -((x - 1)*(y + 1))/8, ((x + 1)*(y - 1))/8, -((x + 1)*(y - 1))/8, -((x + 1)*(y + 1))/8, ((x + 1)*(y + 1))/8];

DN_X = J\ DN_XI;

BL=[DN_X(1,1),        0,        0,DN_X(1,2),        0,        0,DN_X(1,3),        0,        0,DN_X(1,4),        0,        0,DN_X(1,5),        0,        0,DN_X(1,6),        0,        0,DN_X(1,7),        0,        0,DN_X(1,8),        0,        0;
            0,DN_X(2,1),        0,        0,DN_X(2,2),        0,        0,DN_X(2,3),        0,        0,DN_X(2,4),        0,        0,DN_X(2,5),        0,        0,DN_X(2,6),        0,        0,DN_X(2,7),        0,        0,DN_X(2,8),        0;
            0,        0,DN_X(3,1),        0,        0,DN_X(3,2),        0,        0,DN_X(3,3),        0,        0,DN_X(3,4),        0,        0,DN_X(3,5),        0,        0,DN_X(3,6),        0,        0,DN_X(3,7),        0,        0,DN_X(3,8);
    DN_X(2,1),DN_X(1,1),        0,DN_X(2,2),DN_X(1,2),        0,DN_X(2,3),DN_X(1,3),        0,DN_X(2,4),DN_X(1,4),        0,DN_X(2,5),DN_X(1,5),        0,DN_X(2,6),DN_X(1,6),        0,DN_X(2,7),DN_X(1,7),        0,DN_X(2,8),DN_X(1,8),        0;
            0,DN_X(3,1),DN_X(2,1),        0,DN_X(3,2),DN_X(2,2),        0,DN_X(3,3),DN_X(2,3),        0,DN_X(3,4),DN_X(2,4),        0,DN_X(3,5),DN_X(2,5),        0,DN_X(3,6),DN_X(2,6),        0,DN_X(3,7),DN_X(2,7),        0,DN_X(3,8),DN_X(2,8);
    DN_X(3,1),        0,DN_X(1,1),DN_X(3,2),        0,DN_X(1,2),DN_X(3,3),        0,DN_X(1,3),DN_X(3,4),        0,DN_X(1,4),DN_X(3,5),        0,DN_X(1,5),DN_X(3,6),        0,DN_X(1,6),DN_X(3,7),        0,DN_X(1,7),DN_X(3,8),        0,DN_X(1,8)];


D=E/((1+nu)*(1-2*nu))*...  % E/(1+nu)/(1-2*nu)
  [1-nu    nu    nu        0        0          0;
     nu  1-nu    nu        0        0          0;
     nu    nu  1-nu        0        0          0;
      0     0     0  (0.5-nu)       0          0;
      0     0     0        0  (0.5-nu)         0;
      0     0     0        0         0  (0.5-nu)];
% C3D8
k0=BL.'*D*BL;


N_matrix=[-((x - 1)*(y - 1)*(z - 1))/8,                            0,                            0, ((x - 1)*(y - 1)*(z + 1))/8,                           0,                           0, ((x - 1)*(y + 1)*(z - 1))/8,                           0,                           0, -((x - 1)*(y + 1)*(z + 1))/8,                            0,                            0, ((x + 1)*(y - 1)*(z - 1))/8,                           0,                           0, -((x + 1)*(y - 1)*(z + 1))/8,                            0,                            0, -((x + 1)*(y + 1)*(z - 1))/8,                            0,                            0, ((x + 1)*(y + 1)*(z + 1))/8,                           0,                           0;
                                     0, -((x - 1)*(y - 1)*(z - 1))/8,                            0,                           0, ((x - 1)*(y - 1)*(z + 1))/8,                           0,                           0, ((x - 1)*(y + 1)*(z - 1))/8,                           0,                            0, -((x - 1)*(y + 1)*(z + 1))/8,                            0,                           0, ((x + 1)*(y - 1)*(z - 1))/8,                           0,                            0, -((x + 1)*(y - 1)*(z + 1))/8,                            0,                            0, -((x + 1)*(y + 1)*(z - 1))/8,                            0,                           0, ((x + 1)*(y + 1)*(z + 1))/8,                           0;
                                     0,                            0, -((x - 1)*(y - 1)*(z - 1))/8,                           0,                           0, ((x - 1)*(y - 1)*(z + 1))/8,                           0,                           0, ((x - 1)*(y + 1)*(z - 1))/8,                            0,                            0, -((x - 1)*(y + 1)*(z + 1))/8,                           0,                           0, ((x + 1)*(y - 1)*(z - 1))/8,                            0,                            0, -((x + 1)*(y - 1)*(z + 1))/8,                            0,                            0, -((x + 1)*(y + 1)*(z - 1))/8,                           0,                           0, ((x + 1)*(y + 1)*(z + 1))/8];

m0=rho*(N_matrix.'*N_matrix);

ke_all_m=ke_all_m+Gauss_points(i,5)*k0*det(J);
me_all_m=me_all_m+Gauss_points(i,5)*m0*det(J);


% C3D8I (open this part and next)
JJ=inv(J);
DP=[-2*x*JJ(1,1),0,0,-2*y*JJ(1,2),0,0,-2*z*JJ(1,3),0,0;
    0,-2*x*JJ(2,1),0,0,-2*y*JJ(2,2),0,0,-2*z*JJ(2,3),0;
    0,0,-2*x*JJ(3,1),0,0,-2*y*JJ(3,2),0,0,-2*z*JJ(3,3);
    -2*x*JJ(2,1),-2*x*JJ(1,1),0,-2*y*JJ(2,2),-2*y*JJ(1,2),0,-2*z*JJ(2,3),-2*z*JJ(1,3),0;
    0,-2*x*JJ(3,1),-2*x*JJ(2,1),0,-2*y*JJ(3,2),-2*y*JJ(2,2),0,-2*z*JJ(3,3),-2*z*JJ(2,3);
    -2*x*JJ(3,1),0,-2*x*JJ(1,1),-2*y*JJ(3,2),0,-2*y*JJ(1,2),-2*z*JJ(3,3),0,-2*z*JJ(1,3)];
k12=BL.'*D*DP; k21=DP.'*D*BL; k22=DP.'*D*DP; % after integral only eye remain
ke_12=ke_12+Gauss_points(i,5)*k12*det(J);
ke_21=ke_21+Gauss_points(i,5)*k21*det(J);
ke_22=ke_22+Gauss_points(i,5)*k22*det(J);

end

% C3D8I (part II)
ke_all_m=ke_all_m-ke_12*(ke_22\ke_21);

x0=x0.'; x0=x0(:);
fk_all_m=ke_all_m*x0;
Ge_forkron=zeros(Nnum_pelem,num_node); Ge_forkron(1:Nnum_pelem,code_nodes)=eye(Nnum_pelem);  Ge_all_m= kron(Ge_forkron, eye(Dnum_pnode)); %各单元向整体矩阵的扩展矩阵。